basePath: /
definitions:
  model.Category:
    enum:
    - DRINK
    - MAIN_COURSE
    - DESSERT
    - APPETIZER
    type: string
    x-enum-varnames:
    - CategoryDrink
    - CategoryMainCourse
    - CategoryDessert
    - CategoryAppetizer
  model.Ingredient:
    properties:
      _id:
        type: string
      name:
        type: string
    type: object
  model.IngredientMeta:
    properties:
      quantity:
        type: number
      unit:
        type: string
    type: object
  model.IngredientWithoutID:
    properties:
      name:
        type: string
    type: object
  model.Recipe:
    properties:
      _id:
        type: string
      category:
        $ref: '#/definitions/model.Category'
      description:
        type: string
      ingredients:
        items:
          type: string
        type: array
      ingredients_meta:
        items:
          $ref: '#/definitions/model.IngredientMeta'
        type: array
      name:
        type: string
      steps:
        items:
          type: string
        type: array
    type: object
  model.RecipeWithoutID:
    properties:
      category:
        $ref: '#/definitions/model.Category'
      description:
        type: string
      ingredients:
        items:
          type: string
        type: array
      ingredients_meta:
        items:
          $ref: '#/definitions/model.IngredientMeta'
        type: array
      name:
        type: string
      steps:
        items:
          type: string
        type: array
    type: object
host: localhost:4000
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: REST API.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: REST API for recipes backend.
  version: "1.0"
paths:
  /ingredients:
    get:
      description: get all ingredients
      operationId: allingredients
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Ingredient'
            type: array
      summary: Get all ingredients
    post:
      description: Add ingredient
      operationId: addingredient
      parameters:
      - description: Ingredient
        in: body
        name: ingredient
        required: true
        schema:
          $ref: '#/definitions/model.IngredientWithoutID'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.Ingredient'
      summary: Add an ingredient
  /ingredients/{name}:
    get:
      description: get ingredient by name
      operationId: ingredientbyname
      parameters:
      - description: Name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Ingredient'
      summary: Get ingredient by name
  /ingredients/generate:
    post:
      description: Generate ingredients
      operationId: generateingredients
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            items:
              $ref: '#/definitions/model.Ingredient'
            type: array
      summary: Generate ingredients
  /recipes:
    get:
      description: get all recipes
      operationId: allrecipes
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Recipe'
            type: array
      summary: Get all recipes
    post:
      description: get a recipe by ID
      operationId: addrecipe
      parameters:
      - description: Recipe
        in: body
        name: recipe
        required: true
        schema:
          $ref: '#/definitions/model.Recipe'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.RecipeWithoutID'
      summary: Add a recipe
  /recipes/{id}:
    get:
      description: get a recipe by ID
      operationId: getrecipe
      parameters:
      - description: Recipe ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Recipe'
      summary: Get recipe by ID
  /recipes/generate:
    post:
      description: Generate recipes
      operationId: generaterecipe
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            items:
              $ref: '#/definitions/model.Recipe'
            type: array
      summary: Generate recipe
swagger: "2.0"
